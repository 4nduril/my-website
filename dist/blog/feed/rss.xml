<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[Front(-End)-Berichte]]></title>
    <link>http://tobias-barth.net/blog</link>
    <atom:link href="/blog/feed/rss.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[Das Blog von Tobi über Web-Development, Arbeit und Technik]]></description>
    <pubDate>Fri, 03 Jul 2015 06:48:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title><![CDATA[Vererbung von viewport-percentage lengths in Chrome]]></title>
      <link>http://tobias-barth.net/blog/2013/06/Vererbung-von-viewport-percentage-lengths-in-Chrome/</link>
      <guid>http://tobias-barth.net/blog/2013/06/Vererbung-von-viewport-percentage-lengths-in-Chrome/</guid>
      <pubDate>Wed, 05 Jun 2013 14:59:00 GMT</pubDate>
      <description>
      <![CDATA[<p>Ich stolperte neulich über ein Problem mit <a href="http://www.w3.org/TR/css3-values/#viewport-relative-lengths">viewport-relativen Länge]]>
      </description>
      <content:encoded><![CDATA[<p>Ich stolperte neulich über ein Problem mit <a href="http://www.w3.org/TR/css3-values/#viewport-relative-lengths">viewport-relativen Längen</a> in CSS. Die Situation war konkret folgende:</p>
<p>Ich hatte eine ungeordnete Liste, deren Elemente je ein <code>&lt;div&gt;</code> enthielten, in dem sich wiederum ein <code>&lt;a&gt;</code> befand:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>Test<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Zuerst ein Beispiel, wie es funktionieren sollte. Die <code>&lt;li&gt;</code>-Elemente sollen eine definierte Höhe haben und die <code>&lt;div&gt;</code>s sollten genauso hoch sein. Das CSS dazu:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* <span class="rules">&#123; <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span></span></span>; &#125;</span></span><br><span class="line"><span class="tag">ul</span> <span class="rules">&#123; <span class="rule"><span class="attribute">list-style-type</span>:<span class="value">none</span></span>; &#125;</span></span><br><span class="line"><span class="tag">li</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value">blue</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">10em</span></span></span>; </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="tag">div</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value">red</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">100%</span></span></span>; <span class="comment">/* Genau so hoch wie sein Container */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="http://jsfiddle.net/PgTZ2/2/">Hier ist ein JS-Fiddle dazu</a>. Wie erwartet bedeckt das rote <code>&lt;div&gt;</code> das gesamte Listenelement. Ruhig auch mal in verschiedenen Browsern ansehen.</p>
<p>Jetzt geben wir dem <code>&lt;li&gt;</code>-Element aber eine vom Viewport abhängige Größe:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">li</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">30vw</span></span></span>; <span class="comment">/* Die Höhe soll 30 Prozent der Breite des Viewports betragen */</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="http://jsfiddle.net/PgTZ2/3/">Hier die geänderte Demo</a>.</p>
<p>Im Firefox sieht es immer noch genau so aus wie vorher. Das würde man (ich) auch erwarten. Schließlich hat das Listenelement eine definierte Größe und ich sage, dass sein direktes Kindelement 100% dieser Größe haben soll. Sieht man sich das Ergebnis in Chrome an, zeigt sich aber ein anderes Bild.</p>
<p>Das <code>&lt;li&gt;</code> hat zwar die richtige Größe, aber das <code>&lt;div&gt;</code> ist nur so hoch, wie es sein Inhalt (eine Textzeile) erfordert. Sogar im IE9 wird es korrekt (wie im FF) dargestellt. Opera unterstützt derzeit keine viewport-related lengths, aber da auch dort <a href="http://business.opera.com/press/releases/general/opera-gears-up-at-300-million-users">demnächst ein Webkit rendert</a>, wird es sich wohl auch nur mittelmäßig zum Guten ändern.</p>
<p>Anscheinend muss man derzeit also entweder für Chrome in solchen Fällen auch jedem Kindelement die <code>v*</code>-Größe zuweisen, oder mit anderen Längeneinheiten arbeiten. Schade.</p>
]]></content:encoded>
      <comments>http://tobias-barth.net/blog/2013/06/Vererbung-von-viewport-percentage-lengths-in-Chrome/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[jQuerys scrollTop() und border-box]]></title>
      <link>http://tobias-barth.net/blog/2013/01/jQuerys-scrollTop-und-border-box/</link>
      <guid>http://tobias-barth.net/blog/2013/01/jQuerys-scrollTop-und-border-box/</guid>
      <pubDate>Mon, 28 Jan 2013 21:01:00 GMT</pubDate>
      <description>
      <![CDATA[<p><strong>Das Folgende betrifft soweit ich sehe nur jQuery &lt; 1.8.</strong></p>
<p>Letzte Woche habe ich den ersten Kandidaten für den ir]]>
      </description>
      <content:encoded><![CDATA[<p><strong>Das Folgende betrifft soweit ich sehe nur jQuery &lt; 1.8.</strong></p>
<p>Letzte Woche habe ich den ersten Kandidaten für den irrsten Bug in diesem Jahr gefunden.</p>
<p>Der Fehler, den der Kunde berichtete, beruhte darauf, dass das ursprünglich verwendete <code>$(document).scrollTop()</code> nicht im IE8 funktionierte und nachdem er dies durch das funktionierende <code>$(&#39;html&#39;).scrollTop()</code> ersetzt hatte, lief es nicht mehr in Webkit-Browsern.</p>
<p>Die Lösung dafür war relativ schnell gefunden: Ich ersetzte einfach in dem betreffenden Script den einen <code>scrollTop()</code>-Aufruf durch den Ausdruck <code>($(document).scrollTop() || $(&#39;html&#39;).scrollTop())</code>. Damit war der Drops gelutscht und jeder Browser konnte sich aussuchen, was ihm passte (bzw. was nicht gleich 0 war, da der Code nur beim Scrollen zur Anwendung kam, reichte das aus).</p>
<p>Aber was war die Ursache? Nach viel Ausprobieren blieb mir nichts übrig als in die jQuery-Source zu schauen und mir anzusehen, wie jQuery.scrollTop() definiert ist. Für das verwendete jQuery 1.6.4 sieht das so aus:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create scrollLeft and scrollTop methods</span></span><br><span class="line">jQuery.each( [<span class="string">"Left"</span>, <span class="string">"Top"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"> i, name </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> method = <span class="string">"scroll"</span> + name;</span><br><span class="line"></span><br><span class="line">  jQuery.fn[ method ] = <span class="function"><span class="keyword">function</span>(<span class="params"> val </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elem, win;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( val === <span class="literal">undefined</span> ) &#123;</span><br><span class="line">      elem = <span class="keyword">this</span>[ <span class="number">0</span> ];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ( !elem ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      win = getWindow( elem );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Return the scroll offset</span></span><br><span class="line">      <span class="keyword">return</span> win ? (<span class="string">"pageXOffset"</span> <span class="keyword">in</span> win) ? win[ i ? <span class="string">"pageYOffset"</span> : <span class="string">"pageXOffset"</span> ] :</span><br><span class="line">      jQuery.support.boxModel &amp;amp;&amp;amp; win.document.documentElement[ method ] ||</span><br><span class="line">      win.document.body[ method ] :</span><br><span class="line">      elem[ method ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the scroll offset</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Interessiert uns hier nicht</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Der Fall des IE8 sollte mit der Zeile abgedeckt werden, die mit <code>jQuery.support.boxModel</code> beginnt. Diese Eigenschaft dient eigentlich dazu, zu überprüfen, ob das W3C-Box-Modell vom Browser unterstützt wird. Das Problem ist, in diesem Fall gibt sie <code>false</code> zurück, obwohl das Dokument in Ordnung ist und der Browser sich im Standardmodus befindet. Warum? Also nachsehen, wie <code>jQuery.support.boxModel</code> gesetzt wird:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Figure out if the W3C box model works as expected</span></span><br><span class="line">div.style.width = div.style.paddingLeft = <span class="string">"1px"</span>;</span><br><span class="line">support.boxModel = div.offsetWidth === <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>Es wird ein Test-Div erzeugt, dem verschiedene Eigenschaften zugewiesen und das dann an den <code>body</code> angehängt wird. Da das Element hier einen Pixel breit ist und außerdem ein Padding von einem Pixel erhält, sollte <code>offsetWidth</code>, das die Gesamtbreite enthält, 2px zurückgeben.</p>
<p>Tut es aber nicht.</p>
<p>Der Grund dafür ist, dass ich im CSS <code>box-sizing: border-box;</code> gesetzt habe. Das ist eigentlich eine prima Sache, denn dadurch sind Elemente, denen man eine bestimmte Breite zuweist, auch wirklich so breit &ndash; egal ob sie Innenabstände oder Rahmen enthalten. Aber in diesem Fall passiert dann folgendes: Wir geben einem Element den linken Innenabstand 1px und sagen dann, dass das gesamte Element, mit Innenabständen und Rahmen, 1px breit sein soll. Das bedeutet, für den eigentlichen Inhalt ist kein Platz mehr, was egal ist, weil das Element sowieso keinen Inhalt hat und nur zum Testen da ist. Aber das bedeutet auch, dass <code>offsetWidth</code> nun auch 1 enthält, das ist schließlich die Gesamtbreite des Elements. Damit schlägt der Test <code>div.offsetWidth === 2</code> natürlich fehl, und <code>scrollTop()</code> gibt nicht mehr <code>window.document.documentElement.scrollTop</code> zurück, sondern 0.</p>
<p>Darauf muss man erstmal kommen</p>
<p>Ab jQuery 1.8 besteht das Problem nicht mehr, weil dann nicht mehr auf Box-Model-Support getestet wird bzw. dieser Test nicht mehr in <code>scrollTop()</code> abgerufen wird.</p>
<p>Warum Webkit übrigens <code>$(&#39;html&#39;).scrollTop()</code> nicht versteht, ist mir noch nicht so ganz klar.</p>
]]></content:encoded>
      <comments>http://tobias-barth.net/blog/2013/01/jQuerys-scrollTop-und-border-box/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[.htaccess-Spielereien]]></title>
      <link>http://tobias-barth.net/blog/2011/12/-htaccess-Spielereien/</link>
      <guid>http://tobias-barth.net/blog/2011/12/-htaccess-Spielereien/</guid>
      <pubDate>Sun, 04 Dec 2011 12:47:00 GMT</pubDate>
      <description>
      <![CDATA[<p>Mit .htaccess-Dateien kann man den Zugang zu den einzelnen Dateien oder Dokumenten auf seinem (Apache-)Webserver sehr bequem regeln. Es l]]>
      </description>
      <content:encoded><![CDATA[<p>Mit .htaccess-Dateien kann man den Zugang zu den einzelnen Dateien oder Dokumenten auf seinem (Apache-)Webserver sehr bequem regeln. Es lassen sich zum Beispiel einzelne Verzeichnisse nur für Nutzer mit einer bestimmten IP freigeben. Oder man kann Passwörter für den Zugang vergeben. Vor ein paar Tagen habe ich herausgefunden, dass man mit ihnen auch wunderbar beliebige andere Servervariablen abfragen kann.</p>
<p>Mit dem Modul <a href="https://httpd.apache.org/docs/2.2/mod/mod_setenvif.html">mod_setenvif</a> nämlich lassen sich mit Hilfe der zwei Direktiven <em>BrowserMatch</em> und <em>SetEnvIf</em> (und deren Varianten, denen Groß- und Kleinschreibung egal ist) Umgebungsvariablen abfragen und davon abhängig den Zugang zu Ressourcen regeln.</p>
<p>Ich habe das benutzt, um folgendes zu tun. Ein PHP-Dokument bindet mit <code>require</code> eine HTML-Datei ein und zwar abhängig vom Rückgabewert eines If-Statements:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (…) &#123; <span class="keyword">require</span> <span class="string">"eingebunden.html"</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>Auch wenn ich den Namen der HTML-Datei so wähle, dass er schwer erraten werden kann, möchte ich sichergehen, dass niemand einfach die Adresse der Datei in den Browser eingeben und so ihren Inhalt anzeigen kann. Das geht jetzt ziemlich einfach, indem ich eine .htaccess-Datei in das Verzeichnis lege, in dem sich die fragliche HTML-Datei befindet und sie mit diesem Inhalt versehe:</p>
<figure class="highlight apacheconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SetEnvIf</span> Request_URI <span class="string">"eingebunden\.html$"</span> verboten</span><br><span class="line"><span class="keyword"><span class="common">Deny</span></span> from env=verboten</span><br></pre></td></tr></table></figure>
<p>Mit der SetEnvIf-Direktive setze ich eine Variable namens &bdquo;verboten&ldquo; genau dann wenn der <abbr title="Uniform Resource Identifier">URI</abbr>-String, den der Browser als Request gesendet hat, mit dem regulären Ausdruck <code>&quot;eingebunden\.html$&quot;</code> übereinstimmt. Als nächstes sage ich dem Server, dass er Anfragen, für die er diese Variable erzeugt hat, ablehnen soll. Versucht man jetzt die HTML-Datei direkt im Browser aufzurufen, ist das einzige, was man sieht, ein 403.</p>
<p><a href="http://flattr.com/thing/449791/-htaccess-Spielereien"><img src="http://kritikant.de/media/blogs/kritikant/flattr-badge-large.png" alt="Flattr this" title="Flattr this"></a></p>
]]></content:encoded>
      <comments>http://tobias-barth.net/blog/2011/12/-htaccess-Spielereien/#disqus_comments</comments>
    </item>
    
  </channel>
</rss>
